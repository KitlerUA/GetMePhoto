// Code generated by protoc-gen-go. DO NOT EDIT.
// source: graber.proto

/*
Package graber is a generated protocol buffer package.

It is generated from these files:
	graber.proto

It has these top-level messages:
	Tag
	Id
	Photo
*/
package graber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tag struct {
	Tag string `protobuf:"bytes,1,opt,name=Tag" json:"Tag,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Tag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type Id struct {
	Url string `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Photo struct {
	Image []byte `protobuf:"bytes,1,opt,name=Image,proto3" json:"Image,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Photo) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*Tag)(nil), "graber.Tag")
	proto.RegisterType((*Id)(nil), "graber.Id")
	proto.RegisterType((*Photo)(nil), "graber.Photo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GragPhoto service

type GragPhotoClient interface {
	Get(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Photo, error)
}

type gragPhotoClient struct {
	cc *grpc.ClientConn
}

func NewGragPhotoClient(cc *grpc.ClientConn) GragPhotoClient {
	return &gragPhotoClient{cc}
}

func (c *gragPhotoClient) Get(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := grpc.Invoke(ctx, "/graber.GragPhoto/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GragPhoto service

type GragPhotoServer interface {
	Get(context.Context, *Tag) (*Photo, error)
}

func RegisterGragPhotoServer(s *grpc.Server, srv GragPhotoServer) {
	s.RegisterService(&_GragPhoto_serviceDesc, srv)
}

func _GragPhoto_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GragPhotoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graber.GragPhoto/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GragPhotoServer).Get(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

var _GragPhoto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graber.GragPhoto",
	HandlerType: (*GragPhotoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GragPhoto_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graber.proto",
}

// Client API for DownloadById service

type DownloadByIdClient interface {
	Download(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Photo, error)
}

type downloadByIdClient struct {
	cc *grpc.ClientConn
}

func NewDownloadByIdClient(cc *grpc.ClientConn) DownloadByIdClient {
	return &downloadByIdClient{cc}
}

func (c *downloadByIdClient) Download(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := grpc.Invoke(ctx, "/graber.DownloadById/Download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DownloadById service

type DownloadByIdServer interface {
	Download(context.Context, *Id) (*Photo, error)
}

func RegisterDownloadByIdServer(s *grpc.Server, srv DownloadByIdServer) {
	s.RegisterService(&_DownloadById_serviceDesc, srv)
}

func _DownloadById_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadByIdServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graber.DownloadById/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadByIdServer).Download(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _DownloadById_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graber.DownloadById",
	HandlerType: (*DownloadByIdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _DownloadById_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graber.proto",
}

func init() { proto.RegisterFile("graber.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2f, 0x4a, 0x4c,
	0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xc4, 0xb9, 0x98,
	0x43, 0x12, 0xd3, 0x85, 0x04, 0xc0, 0x94, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0xa9,
	0x24, 0xc6, 0xc5, 0xe4, 0x99, 0x02, 0x12, 0x0f, 0x2d, 0xca, 0x81, 0x89, 0x87, 0x16, 0xe5, 0x28,
	0xc9, 0x72, 0xb1, 0x06, 0x64, 0x80, 0x4c, 0x10, 0xe1, 0x62, 0xf5, 0xcc, 0x4d, 0x4c, 0x4f, 0x05,
	0x4b, 0xf2, 0x04, 0x41, 0x38, 0x46, 0x06, 0x5c, 0x9c, 0xee, 0x45, 0x89, 0xe9, 0x10, 0x25, 0xca,
	0x5c, 0xcc, 0xee, 0xa9, 0x25, 0x42, 0xdc, 0x7a, 0x50, 0xab, 0x43, 0x12, 0xd3, 0xa5, 0x78, 0x61,
	0x1c, 0xb0, 0x12, 0x25, 0x06, 0x23, 0x73, 0x2e, 0x1e, 0x97, 0xfc, 0xf2, 0xbc, 0x9c, 0xfc, 0xc4,
	0x14, 0xa7, 0x4a, 0xcf, 0x14, 0x21, 0x75, 0x2e, 0x0e, 0x18, 0x5f, 0x88, 0x0b, 0xa6, 0xd8, 0x33,
	0x05, 0x43, 0x63, 0x12, 0x1b, 0xd8, 0x27, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x9c,
	0x42, 0x50, 0xd9, 0x00, 0x00, 0x00,
}
